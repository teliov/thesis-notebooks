"""
This script handles imputation of the data.
It was generated by going through all the available codes and determining what values should fit
"""

import numpy as np

# IMPUTING_METHODS
EDUCATED_GUESS = 0 # pick the most logical default value
NA_GUESS = 1 # use a null type value

def handle_imputation(value, allowed_values, imput_method, educated_guess, na_guess):
    if value in allowed_values:
        return allowed_values[value]
    else:
        if imput_method == EDUCATED_GUESS:
            return educated_guess
        else:
            return na_guess

class Imputer:
    """
    """
    @staticmethod
    def handle_46288_7(observation_value, method=0):
        """
        US Guidance for biopsy of Prostate [ ]
        """
        allowed_values = {
            'Surgical biopsy result normal': 0,
            'Surgical biopsy result abnormal': 1
        }

        NA_VALUE = 2
        EDUCATED_VALUE = NA_VALUE
        
        return handle_imputation(observation_value, allowed_values, method, EDUCATED_VALUE, NA_VALUE)

    @staticmethod
    def handle_32465_7(observation_value, method=0):
        """
        Physical findings of Prostate [ ]
        """
        allowed_values = {
            'Normal size prostate': 0,
            'Prostate enlarged on PR': 1
        }

        NA_VALUE = 2
        EDUCATED_VALUE = NA_VALUE
        
        return handle_imputation(observation_value, allowed_values, method, EDUCATED_VALUE, NA_VALUE)

    @staticmethod
    def handle_5799_2(observation_value, method=0):
        """
        Leukocyte esterase [Presence] in Urine by Test strip []
        """
        allowed_values = {
            'Urine leukocyte test negative (finding)': 0,
            'Urine leukocyte test positive (finding)': 1,
        }

        NA_VALUE = 2
        EDUCATED_VALUE = NA_VALUE
        
        return handle_imputation(observation_value, allowed_values, method, EDUCATED_VALUE, NA_VALUE)

    @staticmethod
    def handle_5794_3(observation_value, method=0):
        """
        Hemoglobin [Presence] in Urine by Test strip [ ]
        """
        allowed_values = {
            'Urine blood test = negative (finding)': 0,
            'Blood in urine (finding)': 1
        }

        NA_VALUE = 2
        EDUCATED_VALUE = NA_VALUE
        
        return handle_imputation(observation_value, allowed_values, method, EDUCATED_VALUE, NA_VALUE)

    @staticmethod
    def handle_5802_4(observation_value, method=0):
        """
        Nitrite [Presence] in Urine by Test strip []
        """
        allowed_values = {
            'Urine nitrite negative (finding)': 0,
            'Urine nitrite positive (finding)': 1
        }

        NA_VALUE = 2
        EDUCATED_VALUE = NA_VALUE
        
        return handle_imputation(observation_value, allowed_values, method, EDUCATED_VALUE, NA_VALUE)

    @staticmethod
    def handle_20454_5(observation_value, method=0):
        """
        Protein [Presence] in Urine by Test strip [  ]
        """
        allowed_values = {
            'Urine protein test = +++ (finding)': 0,
            'Urine protein test = + (finding)': 1,
            'Urine protein test = ++ (finding)': 2
        }

        NA_VALUE = 3
        EDUCATED_VALUE = NA_VALUE
        
        return handle_imputation(observation_value, allowed_values, method, EDUCATED_VALUE, NA_VALUE)

    @staticmethod
    def handle_5811_5(observation_value, method=0):
        """
         Specific gravity of Urine by Test strip ['1.0']

         This is a weird one. Synthea lists it as having nominal unit, but in the range of values it can 
         take from the json modules, it accepts a range of floating points as attributes
        """
        try:
            val = float(observation_value)
        except:
            val = np.nan
        
        return val

    @staticmethod
    def handle_2514_8(observation_value, method=0):
        """
        Ketones [Presence] in Urine by Test strip []
        """
        allowed_values = {
            'Urine ketone test = +++ (finding)': 0,
            'Urine ketone test = trace (finding)': 1,
            'Urine ketone test = + (finding)': 2,
            'Urine ketone test = ++ (finding)': 3
        }

        NA_VALUE = 4
        EDUCATED_VALUE = NA_VALUE
        return handle_imputation(observation_value, allowed_values, method, EDUCATED_VALUE, NA_VALUE)

    @staticmethod
    def handle_5770_3(observation_value, method=0):
        """
        Bilirubin.total [Presence] in Urine by Test strip []
        """
        allowed_values = {
            'Finding of bilirubin in urine (finding)': 0
        }
        NA_VALUE = 1
        EDUCATED_VALUE = NA_VALUE
        return handle_imputation(observation_value, allowed_values, method, EDUCATED_VALUE, NA_VALUE)


    @staticmethod
    def handle_25428_4(observation_value, method=0):
        """
        Glucose [Presence] in Urine by Test strip ['Urine glucose test = ++ (finding)']
        """
        allowed_values = {
            'Urine glucose test = ++ (finding)': 0,
            'Urine glucose test = -- (finding)': 1
        }

        NA_VALUE = 2 # encode a new category
        EDUCATED_VALUE = NA_VALUE # always encode a new category

        return handle_imputation(observation_value, allowed_values, method, EDUCATED_VALUE, NA_VALUE)

    @staticmethod
    def handle_5778_6(observation_value, method=0):
        """
        Color of Urine ['Brown color (qualifier value)' ]
        """

        allowed_values = {
            'Brown color (qualifier value)': 0,
            'Reddish color urine': 1
        }

        NA_VALUE = 2 # encode a new category
        EDUCATED_VALUE = NA_VALUE # always encode a new category

        return handle_imputation(observation_value, allowed_values, method, EDUCATED_VALUE, NA_VALUE)

    @staticmethod
    def handle_32167_9(observation_value, method=0):
        """
        Clarity of Urine ['Translucent (qualifier value)' 'Cloudy urine (finding)']
        """
        allowed_values = {
            'Translucent (qualifier value)': 0,
            'Cloudy urine (finding)': 1
        }

        NA_VALUE = 2 # encode a new category
        EDUCATED_VALUE = NA_VALUE # always encode a new category

        return handle_imputation(observation_value, allowed_values, method, EDUCATED_VALUE, NA_VALUE)

    @staticmethod
    def handle_63513_6(observation_value, method=0):
        """
        Are you covered by health insurance or some other kind of health care plan [PhenX] ['No' 'Yes']
        """
        allowed_values = {
            'No': 0,
            'Yes': 1
        }

        EDUCATED_VALUE = 1 # HMMMM
        NA_VALUE = 2 # encode a new category

        return handle_imputation(observation_value, allowed_values, method, EDUCATED_VALUE, NA_VALUE)
    
    @staticmethod
    def handle_5767_9(observation_value, method=0):
        """
        Odor of Urine [ ]
        """
        allowed_values = {
            'Cloudy urine (finding)': 0,
            'Urine smell ammoniacal (finding)': 1,
            'Foul smelling urine (finding)': 2
        }

        NA_VALUE = 3 # encode a new category
        EDUCATED_VALUE = NA_VALUE # always encode a new category

        return handle_imputation(observation_value, allowed_values, method, EDUCATED_VALUE, NA_VALUE)

    @staticmethod
    def handle_71802_3(observation_value, method=0):
        """
        Housing status []
        """
        allowed_values = {
            'Patient is homeless': 0,
            'Patient is not homeless': 1
        }

        EDUCATED_VALUE = 1 # 
        NA_VALUE = 2

        return handle_imputation(observation_value, allowed_values, method, EDUCATED_VALUE, NA_VALUE)

    @staticmethod
    def handle_28245_9(observation_value, method=0):
        """
        Abuse Status [OMAHA]
        """
        allowed_values = {
            'Severe signs/symptoms': 0,
            'No signs/symptoms': 1
        }

        NA_VALUE = 3
        EDUCATED_VALUE = 1

        return handle_imputation(observation_value, allowed_values, method, EDUCATED_VALUE, NA_VALUE)

    @staticmethod
    def handle_76690_7(observation_value, method=0):
        """
        Handles Sexual Status
        """
        allowed_values = {
            'heterosexual': 0,
            'homosexual': 1,
            'bisexual': 2
        }
        NA_VALUE = 3 # an encoding for not available
        EDUCATED_VALUE = 0 # assume heterosexual if missing

        return handle_imputation(observation_value, allowed_values, method, EDUCATED_VALUE, NA_VALUE)

    @staticmethod
    def handle_55277_8(observation_value, method=0):
        """
        Handles HIV status
        """
        allowed_values = {
            'not HIV positive': 0,
            'HIV positive': 1
        }

        NA_VALUE = 2
        EDUCATED_VALUE = 0 # assume HIV negative
        
        return handle_imputation(observation_value, allowed_values, method, EDUCATED_VALUE, NA_VALUE)
    
    @staticmethod
    def handle_72166_2(observation_value, method=0):
        """
        Tobacco smoking status NHIS
        """
        allowed_values = {
            'Never smoker': 0,
            'Former smoker': 1,
            'Current every day smoker': 2
        }
        
        NA_VALUE = 2
        EDUCATED_VALUE = NA_VALUE

        return handle_imputation(observation_value, allowed_values, method, EDUCATED_VALUE, NA_VALUE)

def get_encoding(observation_code, observation_value = None, imput_method=0):
    observation_function = "handle_" + observation_code.replace("-", "_")
    if not hasattr(Imputer, observation_function):
        raise Exception("Unsupported observation code: %s" % observation_code)

    return getattr(Imputer, observation_function)(observation_value, imput_method)